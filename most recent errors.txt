Test results for JsonTools v5.7.0.1 on Notepad++ 8.5.7 64bit
NOTE: Ctrl-F (regular expressions *on*) for "Failed [1-9]\d*" to find all failed tests
Tests failed: YAML dumper
=========================
Testing JNode Copy method
=========================

Failed 0 tests.
Passed 12 tests.
=========================
Testing JSON parser
=========================

obj =
/*foo*/ //bar
{"a": ‚Åü[1, 2, 3], ¬†"b": {}, „ÄÄ"–ØËçâ": [], "üòÄ": [[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,//üòÄ
 [113, 114]]],/*c√∂mment*/"d":[{"o":"√∂yster"},"c√§t",#python 
"dog"],"e":false,//c√∂mment
"f":null}//baz 
# more python
/*quz
zuq*/

Failed 0 tests.
Passed 125 tests.
=========================
Testing if JSON parser throws errors on bad inputs
=========================

Failed 0 tests.
Passed 5 tests.
=========================
Testing JSON parser advanced options (javascript comments, dates, datetimes, singlequoted strings)
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Testing JSON parser's linter functionality
=========================

Failed 0 tests.
Passed 55 tests.
=========================
Testing JSON Lines parser
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing that parsing of numbers does not depend on current culture
=========================

Failed 0 tests.
Passed 1 tests.
=========================
Testing YAML dumper
=========================

Test 7 (singlequotes and doublequotes inside key) failed:
Expected
a"b': "bub\"ar"

Got
a\"b': "bub\"ar"

Test 19 (Value contains quotes and colon) failed:
Expected
a: 'RT @blah: MondayMo"r''ing'

Got
a: "RT @blah: MondayMo\"r\'ing"

Test 20 (Value contains quotes and newline) failed:
Expected
a: "a\n'big'\ndog"

Got
a: "a\n\'big\'\ndog"

Test 22 (key contains quotes and colon) failed:
Expected
'"a: ''b''': a

Got
"\\\"a: ''b''": a

Failed 4 tests.
Passed 18 tests.
=========================
Testing slice extension
=========================

Failed 0 tests.
Passed 80 tests.
=========================
Testing Least Recently Used (LRU) cache implementation
=========================

Ran 15 tests for LruCache with size 5 and failed 0
Ran 30 tests for LruCache with size 10 and failed 0
Ran 51 tests for LruCache with size 17 and failed 0
Ran 135 tests for LruCache with size 45 and failed 0
Ran 192 tests for LruCache with size 64 and failed 0
=========================
Testing RemesPath parser and compiler
=========================

The queried JSON in the RemesParser tests is named foo:{"foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "quz": {}, "jub": [], "guzo": [[[1]], [[2], [3]]], "7": [{"foo": 2}, 1], "_": {"0": 0}}
Failed 0 tests.
Passed 406 tests.
=========================
Testing that RemesPath throws errors on bad inputs
=========================

Failed 0 tests.
Passed 639 tests.
=========================
Testing RemesPath assignment operations
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Testing that RemesPath produces sane outputs on randomly generated queries
=========================

Fuzz tests query
{"a": [-4, -3., -2., -1, 0, 1, 2., 3., 4], "bc": NaN,"c`d": "df", "q": ["", "a", "jk", "ian", "", "32", "u", "aa", "moun"],"f": 1,"g": 1,"h": 1,"i": 1,"j": 1}
Ran 10000 fuzz tests
Failed 0 fuzz tests
=========================
Testing multi-statement queries in RemesPath
=========================

The queried JSON in the RemesParser complex query tests is named foo:{"foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "quz": {}, "jub": [], "guzo": [[[1]], [[2], [3]]], "7": [{"foo": 2}, 1], "_": {"0": 0}}
Failed 0 tests.
Passed 6 tests.
=========================
Testing JsonSchema generator
=========================

Failed 0 tests.
Passed 9 tests.
=========================
Testing JsonSchema validator
=========================

Failed 0 tests.
Passed 224 tests.
=========================
Testing JSON tabularizer
=========================

Failed 0 tests.
Passed 55 tests.
=========================
Testing JSON grepper's file reading ability
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing JSON grepper's API request tool
=========================

Testing with 3 urls
Testing with 1 urls
Failed 0 tests.
Passed 4 tests.
=========================
Testing generation of random JSON from schema
=========================

Failed 0 tests.
Passed 16 tests.
=========================
Testing conversion of JSON to DSON (see https://dogeon.xyz/)
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing JNode PathToPosition method
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Performing UI tests by faking user actions
=========================

Failed 0 tests
Passed 194 tests
=========================
Performance tests for JsonParser
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To convert JSON string of size 89556 into JNode took 2.68 +/- 1.473 ms over 32 trials
Load times (ms): 4, 6, 6, 3, 2, 5, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1, 3, 1
=========================
Performance tests for RemesPath (float arithmetic)
=========================

Compiling query "@[@[:].a * @[:].t < @[:].e]" into took 1.958 +/- 14.796 microseconds over 64 trials
To run pre-compiled query "@[@[:].a * @[:].t < @[:].e]" on JNode from JSON of size 89556 into took 0.102 +/- 0.506 ms over 64 trials
Query times (ms): 0.067, 0.044, 0.032, 0.033, 0.032, 0.032, 0.031, 0.032, 0.032, 0.031, 0.031, 0.038, 0.032, 0.031, 0.032, 0.031, 0.031, 0.032, 0.031, 0.031, 0.031, 0.093, 0.037, 0.045, 0.034, 0.045, 0.045, 0.035, 0.107, 0.062, 0.036, 0.05, 0.033, 0.036, 0.034, 0.061, 0.074, 0.043, 0.035, 0.033, 0.035, 0.042, 0.043, 0.032, 4.116, 0.033, 0.03, 0.031, 0.03, 0.03, 0.031, 0.031, 0.03, 0.03, 0.031, 0.03, 0.03, 0.03, 0.031, 0.03, 0.03, 0.031, 0.03, 0.03
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (string operations)
=========================

Compiling query "@[@[:].z =~ `(?i)[a-z]{5}`]" into took 1.984 +/- 14.39 microseconds over 64 trials
To run pre-compiled query "@[@[:].z =~ `(?i)[a-z]{5}`]" on JNode from JSON of size 89556 into took 0.082 +/- 0.013 ms over 64 trials
Query times (ms): 0.14, 0.087, 0.087, 0.085, 0.086, 0.082, 0.083, 0.085, 0.082, 0.082, 0.082, 0.083, 0.081, 0.083, 0.081, 0.083, 0.081, 0.083, 0.148, 0.09, 0.087, 0.085, 0.087, 0.084, 0.085, 0.084, 0.085, 0.086, 0.087, 0.086, 0.11, 0.079, 0.075, 0.083, 0.075, 0.076, 0.074, 0.075, 0.075, 0.074, 0.075, 0.075, 0.076, 0.075, 0.076, 0.074, 0.075, 0.075, 0.075, 0.075, 0.075, 0.077, 0.075, 0.076, 0.075, 0.079, 0.077, 0.083, 0.076, 0.075, 0.076, 0.076, 0.076, 0.075
Preview of result: [{"A": "\n]o1VQ5t6g", "a": 4710024278, "b": 3268860721, "B": "g4Y7+ew^.v", "C": "<E_7XL7YS`", "c": 4921465277, "d": 9420665097, "D": "Q&S>NK<OOn", "E": "M?6Ll1W\nFM", "e": 4146283970, "f": 8384193493, "F": "z[jPvslL\tc", "g": 1578133296, "G": "m'M4h,`|Wk", "H": {"a": 5184250383, "b": 5337791147, "c"
...
=========================
Performance tests for RemesPath (basic recursive search)
=========================

Compiling query "@..*" into took 0.909 +/- 6.588 microseconds over 64 trials
To run pre-compiled query "@..*" on JNode from JSON of size 89556 into took 0.495 +/- 0.477 ms over 64 trials
Query times (ms): 0.557, 0.394, 0.592, 0.653, 0.811, 0.504, 0.484, 0.5, 0.474, 0.48, 0.532, 3.963, 0.515, 0.473, 0.478, 0.492, 0.48, 0.484, 0.483, 0.518, 0.472, 1.421, 0.468, 0.465, 0.477, 0.538, 0.388, 0.466, 0.618, 0.393, 0.466, 0.501, 0.581, 0.474, 1.04, 0.386, 0.365, 0.296, 0.315, 0.298, 0.309, 0.314, 0.309, 0.297, 0.298, 0.742, 0.298, 0.298, 0.298, 0.3, 0.304, 0.3, 0.336, 0.238, 0.235, 0.238, 0.234, 0.282, 0.295, 0.305, 0.296, 0.3, 0.29, 0.293
Preview of result: [1850111954, 9318359041, 7974777124, 2670309238, 6958410336, 8050244728, 3799657125, 2612807147, 7785993340, 9842767454, 2257474583, 2736529372, 4821265864, 3302084501, null, Infinity, true, false, true, 0.201077552261751, 0.110978036654776, 0.50917270025261, 0.798199326980627, 0.615212956451379, 0.
...
=========================
Performance tests for JSON compression and pretty-printing
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To compress JNode from JSON string of 89556 took 4.531 +/- 1.129 ms over 64 trials (minimal whitespace, sort_keys=TRUE)
To compress JNode from JSON string of 89556 took 2.394 +/- 0.494 ms over 64 trials (minimal whitespace, sort_keys=FALSE)
To Google-style pretty-print JNode from JSON string of 89556 took 5.595 +/- 1.513 ms over 64 trials (sort_keys=true, indent=4)
To Whitesmith-style pretty-print JNode from JSON string of 89556 took 4.471 +/- 0.553 ms over 64 trials (sort_keys=true, indent=4)
To PPrint-style pretty-print JNode from JSON string of 89556 took 7.312 +/- 1.792 ms over 64 trials (sort_keys=true, indent=4)
=========================
Performance tests for JsonSchemaValidator and random JSON creation
=========================

To create a random set of tweet JSON of size 200487 (15 tweets) based on the matching schema took 6.804 +/- 3.533 ms over 64 trials
To compile the tweet schema to a validation function took 0.38 +/- 0.861 ms over 64 trials
To validate tweet JSON of size 200487 (15 tweets) based on the compiled schema took 1.137 +/- 0.27 ms over 64 trials
