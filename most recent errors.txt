Test results for JsonTools v5.5.0.4
NOTE: Ctrl-F (regular expressions *on*) for "Failed [1-9]\d*" to find all failed tests
Tests failed: YAML dumper
=========================
Testing JNode Copy method
=========================

Failed 0 tests.
Passed 12 tests.
=========================
Testing JSON parser
=========================

obj =
/*foo*/ //bar
{"a": ‚Åü[1, 2, 3], ¬†"b": {}, „ÄÄ"–ØËçâ": [], "üòÄ": [[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,//üòÄ
 [113, 114]]],/*c√∂mment*/"d":[{"o":"√∂yster"},"c√§t",#python 
"dog"],"e":false,//c√∂mment
"f":null}//baz 
# more python
/*quz
zuq*/

Failed 0 tests.
Passed 125 tests.
=========================
Testing if JSON parser throws errors on bad inputs
=========================

Failed 0 tests.
Passed 5 tests.
=========================
Testing JSON parser advanced options (javascript comments, dates, datetimes, singlequoted strings)
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Testing JSON parser's linter functionality
=========================

Failed 0 tests.
Passed 55 tests.
=========================
Testing JSON Lines parser
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing that parsing of numbers does not depend on current culture
=========================

Failed 0 tests.
Passed 1 tests.
=========================
Testing YAML dumper
=========================

Test 7 (singlequotes and doublequotes inside key) failed:
Expected
a"b': "bub\"ar"

Got
a\"b': "bub\"ar"

Test 19 (Value contains quotes and colon) failed:
Expected
a: 'RT @blah: MondayMo"r''ing'

Got
a: "RT @blah: MondayMo\"r\'ing"

Test 20 (Value contains quotes and newline) failed:
Expected
a: "a\n'big'\ndog"

Got
a: "a\n\'big\'\ndog"

Test 22 (key contains quotes and colon) failed:
Expected
'"a: ''b''': a

Got
"\\\"a: ''b''": a

Failed 4 tests.
Passed 18 tests.
=========================
Testing Binops
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing ArgFunctions
=========================

Failed 0 tests.
Passed 4 tests.
=========================
Testing slice extension
=========================

Failed 0 tests.
Passed 80 tests.
=========================
Testing Least Recently Used (LRU) cache implementation
=========================

Ran 15 tests for LruCache with size 5 and failed 0
Ran 30 tests for LruCache with size 10 and failed 0
Ran 51 tests for LruCache with size 17 and failed 0
Ran 135 tests for LruCache with size 45 and failed 0
Ran 192 tests for LruCache with size 64 and failed 0
=========================
Testing RemesPath parser and compiler
=========================

The queried JSON in the RemesParser tests is:{"_": {"0": 0}, "7": [{"foo": 2}, 1], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "guzo": [[[1]], [[2], [3]]], "jub": [], "quz": {}}
Failed 0 tests.
Passed 349 tests.
=========================
Testing that RemesPath throws errors on bad inputs
=========================

Failed 0 tests.
Passed 629 tests.
=========================
Testing RemesPath assignment operations
=========================

Failed 0 tests.
Passed 20 tests.
=========================
Testing that RemesPath produces sane outputs on randomly generated queries
=========================

Fuzz tests query
{"a": [-4, -3., -2., -1, 0, 1, 2., 3., 4], "bc": NaN,"c`d": "df", "q": ["", "a", "jk", "ian", "", "32", "u", "aa", "moun"],"f": 1,"g": 1,"h": 1,"i": 1,"j": 1}
Ran 10000 fuzz tests
Failed 0 fuzz tests
=========================
Testing JsonSchema generator
=========================

Failed 0 tests.
Passed 9 tests.
=========================
Testing JsonSchema validator
=========================

Failed 0 tests.
Passed 224 tests.
=========================
Testing JSON tabularizer
=========================

Failed 0 tests.
Passed 55 tests.
=========================
Testing JSON grepper's file reading ability
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing JSON grepper's API request tool
=========================

Testing with 3 urls
Testing with 1 urls
Failed 0 tests.
Passed 4 tests.
=========================
Testing generation of random JSON from schema
=========================

Failed 0 tests.
Passed 16 tests.
=========================
Testing conversion of JSON to DSON (see https://dogeon.xyz/)
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing JNode PathToPosition method
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Performing UI tests by faking user actions
=========================

Failed 0 tests
Passed 96 tests
=========================
Performance tests for JsonParser
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To convert JSON string of size 89556 into JNode took 3.266 +/- 2.185 ms over 32 trials
Load times (ms): 2, 12, 3, 4, 1, 2, 2, 3, 2, 2, 5, 2, 2, 2, 3, 1, 2, 6, 2, 2, 2, 4, 2, 2, 7, 1, 1, 1, 4, 1, 1, 3
=========================
Performance tests for RemesPath (float arithmetic)
=========================

Compiling query "@[@[:].a * @[:].t < @[:].e]" into took 1.473 +/- 11.103 microseconds over 64 trials
To run pre-compiled query "@[@[:].a * @[:].t < @[:].e]" on JNode from JSON of size 89556 into took 0.043 +/- 0.02 ms over 64 trials
Query times (ms): 0.082, 0.042, 0.023, 0.024, 0.023, 0.024, 0.024, 0.023, 0.043, 0.024, 0.024, 0.031, 0.023, 0.022, 0.023, 0.023, 0.023, 0.023, 0.024, 0.023, 0.023, 0.032, 0.031, 0.04, 0.033, 0.046, 0.042, 0.097, 0.073, 0.112, 0.056, 0.059, 0.035, 0.036, 0.04, 0.034, 0.036, 0.037, 0.039, 0.038, 0.105, 0.069, 0.062, 0.034, 0.034, 0.034, 0.037, 0.069, 0.048, 0.049, 0.045, 0.074, 0.046, 0.047, 0.044, 0.051, 0.046, 0.05, 0.047, 0.05, 0.047, 0.052, 0.05, 0.046
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (string operations)
=========================

Compiling query "@[@[:].z =~ `(?i)[a-z]{5}`]" into took 1.7 +/- 12.637 microseconds over 64 trials
To run pre-compiled query "@[@[:].z =~ `(?i)[a-z]{5}`]" on JNode from JSON of size 89556 into took 0.14 +/- 0.463 ms over 64 trials
Query times (ms): 0.156, 0.143, 0.094, 0.092, 0.081, 0.093, 0.08, 3.814, 0.107, 0.086, 0.089, 0.099, 0.098, 0.087, 0.073, 0.072, 0.074, 0.078, 0.075, 0.077, 0.072, 0.074, 0.07, 0.072, 0.072, 0.077, 0.092, 0.072, 0.073, 0.072, 0.078, 0.078, 0.072, 0.076, 0.078, 0.079, 0.075, 0.076, 0.072, 0.083, 0.079, 0.073, 0.077, 0.074, 0.081, 0.07, 0.072, 0.072, 0.075, 0.075, 0.075, 0.123, 0.072, 0.072, 0.076, 0.076, 0.088, 0.081, 0.076, 0.076, 0.076, 0.077, 0.078, 0.084
Preview of result: [{"A": "\n]o1VQ5t6g", "a": 4710024278, "b": 3268860721, "B": "g4Y7+ew^.v", "C": "<E_7XL7YS`", "c": 4921465277, "d": 9420665097, "D": "Q&S>NK<OOn", "E": "M?6Ll1W\nFM", "e": 4146283970, "f": 8384193493, "F": "z[jPvslL\tc", "g": 1578133296, "G": "m'M4h,`|Wk", "H": {"a": 5184250383, "b": 5337791147, "c"
...
=========================
Performance tests for RemesPath (basic recursive search)
=========================

Compiling query "@..*" into took 0.777 +/- 5.458 microseconds over 64 trials
To run pre-compiled query "@..*" on JNode from JSON of size 89556 into took 0.341 +/- 0.126 ms over 64 trials
Query times (ms): 0.506, 0.318, 0.295, 0.31, 0.305, 0.295, 0.377, 0.464, 0.358, 0.429, 0.542, 0.314, 0.285, 0.31, 0.288, 0.295, 0.24, 0.254, 0.231, 0.239, 0.905, 0.23, 0.374, 0.338, 0.331, 0.351, 0.332, 0.365, 0.342, 0.302, 0.341, 0.244, 0.241, 0.513, 0.246, 0.237, 0.228, 0.239, 0.223, 0.234, 0.285, 0.297, 0.298, 0.544, 0.3, 0.288, 0.286, 0.302, 0.301, 0.292, 0.306, 0.302, 0.285, 0.842, 0.358, 0.356, 0.42, 0.346, 0.324, 0.296, 0.302, 0.299, 0.622, 0.317
Preview of result: [1850111954, 9318359041, 7974777124, 2670309238, 6958410336, 8050244728, 3799657125, 2612807147, 7785993340, 9842767454, 2257474583, 2736529372, 4821265864, 3302084501, null, Infinity, true, false, true, 0.201077552261751, 0.110978036654776, 0.50917270025261, 0.798199326980627, 0.615212956451379, 0.
...
=========================
Performance tests for JSON compression and pretty-printing
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To compress JNode from JSON string of 89556 took 5.09 +/- 1.253 ms over 64 trials (minimal whitespace, sort_keys=TRUE)
To compress JNode from JSON string of 89556 took 3.678 +/- 1.314 ms over 64 trials (minimal whitespace, sort_keys=FALSE)
To Google-style pretty-print JNode from JSON string of 89556 took 7.081 +/- 2.119 ms over 64 trials (sort_keys=true, indent=4)
To Whitesmith-style pretty-print JNode from JSON string of 89556 took 7.123 +/- 2.018 ms over 64 trials (sort_keys=true, indent=4)
To PPrint-style pretty-print JNode from JSON string of 89556 took 7.812 +/- 1.902 ms over 64 trials (sort_keys=true, indent=4)
=========================
Performance tests for JsonSchemaValidator and random JSON creation
=========================

To create a random set of tweet JSON of size 161674 (15 tweets) based on the matching schema took 8.837 +/- 4.332 ms over 64 trials
To compile the tweet schema to a validation function took 0.261 +/- 0.059 ms over 64 trials
To validate tweet JSON of size 161674 (15 tweets) based on the compiled schema took 1.373 +/- 0.758 ms over 64 trials
