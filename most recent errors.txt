=========================
Testing JNode Copy method
=========================

Failed 0 tests.
Passed 12 tests.
=========================
Testing JSON parser
=========================

obj =
{"a": ‚Åü[1, 2, 3], ¬†"b": {}, „ÄÄ"–ØËçâ": [], "üòÄ": [[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, [113, 114]]]}

Failed 0 tests.
Passed 85 tests.
=========================
Testing if JSON parser throws errors on bad inputs
=========================

Failed 0 tests.
Passed 5 tests.
=========================
Testing JSON parser advanced options (javascript comments, dates, datetimes, singlequoted strings)
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Testing JSON parser's linter functionality
=========================

Failed 0 tests.
Passed 51 tests.
=========================
Testing JSON Lines parser
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing YAML dumper
=========================

Test 7 (singlequotes and doublequotes inside key) failed:
Expected
a"b': "bub\"ar"

Got
a\"b': "bub\"ar"

Test 19 (Value contains quotes and colon) failed:
Expected
a: 'RT @blah: MondayMo"r''ing'

Got
a: "RT @blah: MondayMo\"r\'ing"

Test 20 (Value contains quotes and newline) failed:
Expected
a: "a\n'big'\ndog"

Got
a: "a\n\'big\'\ndog"

Test 22 (key contains quotes and colon) failed:
Expected
'"a: ''b''': a

Got
"\\\"a: ''b''": a

Failed 4 tests.
Passed 18 tests.
=========================
Testing Binops
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing ArgFunctions
=========================

Failed 0 tests.
Passed 4 tests.
=========================
Testing slice extension
=========================

Failed 0 tests.
Passed 70 tests.
=========================
Testing RemesPath lexer
=========================

Failed 0 tests.
Passed 26 tests.
=========================
Testing RemesPath parser and compiler
=========================

The queried JSON in the RemesParser tests is:{"_": {"0": 0}, "7": [{"foo": 2}, 1], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "guzo": [[[1]], [[2], [3]]], "jub": [], "quz": {}}
Failed 0 tests.
Passed 203 tests.
=========================
Testing that RemesPath throws errors on bad inputs
=========================

Failed 0 tests.
Passed 617 tests.
=========================
Testing RemesPath assignment operations
=========================

Failed 0 tests.
Passed 20 tests.
=========================
Testing JsonSchema generator
=========================

Failed 0 tests.
Passed 9 tests.
=========================
Testing JsonSchema validator
=========================

Failed 0 tests.
Passed 175 tests.
=========================
Testing JSON tabularizer
=========================

Failed 0 tests.
Passed 55 tests.
=========================
Testing JSON grepper's file reading ability
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing JSON grepper's API request tool
=========================

Testing with 3 urls
Testing with 1 urls
Failed 0 tests.
Passed 4 tests.
=========================
Testing generation of random JSON from schema
=========================

Failed 0 tests.
Passed 16 tests.
=========================
Testing conversion of JSON to DSON (see https://dogeon.xyz/)
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing JNode PathToPosition method
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Performance tests for JsonParser
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To convert JSON string of size 91926 into JNode took 2.056 +/- 0.792 ms over 32 trials
Load times (ms): 3, 2, 1, 1, 2, 1, 3, 1, 1, 4, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 2, 1, 1, 3, 1
=========================
Performance tests for RemesPath (float arithmetic)
=========================

Compiling query "@[@[:].a * @[:].t < @[:].e]" into took 4.678 +/- 2.996 microseconds over 64 trials
To run pre-compiled query "@[@[:].a * @[:].t < @[:].e]" on JNode from JSON of size 91926 into took 0.066 +/- 0.305 ms over 64 trials
Query times (ms): 0.068, 0.028, 0.028, 0.027, 0.028, 0.028, 0.028, 0.028, 0.027, 0.028, 0.028, 0.027, 0.027, 0.028, 0.028, 0.027, 0.029, 0.027, 0.027, 0.028, 0.034, 0.028, 0.028, 0.028, 0.028, 0.027, 0.027, 0.027, 0.028, 0.027, 0.028, 0.028, 0.027, 0.027, 0.027, 0.027, 0.027, 0.027, 0.027, 0.027, 0.026, 0.027, 0.027, 0.026, 0.028, 0.027, 0.027, 0.027, 2.49, 0.028, 0.026, 0.026, 0.026, 0.026, 0.026, 0.026, 0.025, 0.026, 0.026, 0.026, 0.026, 0.026, 0.025, 0.026
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (string operations)
=========================

Compiling query "@[@[:].z =~ `(?i)[a-z]{5}`]" into took 2.639 +/- 3.405 microseconds over 64 trials
To run pre-compiled query "@[@[:].z =~ `(?i)[a-z]{5}`]" on JNode from JSON of size 91926 into took 0.053 +/- 0.004 ms over 64 trials
Query times (ms): 0.084, 0.054, 0.053, 0.052, 0.052, 0.052, 0.052, 0.054, 0.051, 0.052, 0.052, 0.059, 0.052, 0.052, 0.052, 0.052, 0.052, 0.051, 0.052, 0.052, 0.051, 0.052, 0.051, 0.052, 0.051, 0.052, 0.067, 0.051, 0.051, 0.052, 0.052, 0.052, 0.051, 0.052, 0.052, 0.052, 0.051, 0.052, 0.051, 0.052, 0.052, 0.052, 0.051, 0.052, 0.052, 0.052, 0.051, 0.051, 0.052, 0.052, 0.051, 0.051, 0.051, 0.051, 0.052, 0.051, 0.052, 0.052, 0.051, 0.052, 0.051, 0.052, 0.051, 0.052
Preview of result: [{"A": "\n]o1VQ5t6g", "a": 4710024278, "b": 3268860721, "B": "g4Y7+ew^.v", "C": "<E_7XL7YS`", "c": 4921465277, "d": 9420665097, "D": "Q&S>NK<OOn", "E": "M?6Ll1W\nFM", "e": 4146283970, "f": 8384193493, "F": "z[jPvslL\tc", "g": 1578133296, "G": "m'M4h,`|Wk", "H": {"a": 5184250383, "b": 5337791147, "c"
...
=========================
Performance tests for RemesPath (basic recursive search)
=========================

Compiling query "@..*" into took 0.608 +/- 0.994 microseconds over 64 trials
To run pre-compiled query "@..*" on JNode from JSON of size 91926 into took 0.581 +/- 0.248 ms over 64 trials
Query times (ms): 0.506, 0.511, 0.643, 0.578, 2.141, 0.493, 0.48, 0.482, 0.482, 0.482, 0.93, 0.486, 0.482, 0.497, 0.483, 0.485, 0.481, 0.806, 0.482, 0.482, 0.481, 0.48, 0.65, 1.373, 0.488, 0.486, 0.549, 0.499, 0.501, 0.485, 0.838, 0.483, 0.483, 0.483, 0.483, 0.489, 0.781, 0.483, 0.484, 0.489, 0.481, 0.484, 0.481, 0.777, 0.478, 0.481, 0.477, 0.48, 0.479, 0.77, 0.483, 0.566, 0.594, 0.635, 0.504, 0.549, 0.835, 0.484, 0.543, 0.482, 0.485, 0.484, 0.784, 0.5
Preview of result: [1850111954, 9318359041, 7974777124, 2670309238, 6958410336, 8050244728, 3799657125, 2612807147, 7785993340, 9842767454, 2257474583, 2736529372, 4821265864, 3302084501, 1506933286, 7851467140, 0.449658025041282, 0.889524736382732, 0.153807552183378, 0.201077552261751, 0.110978036654776, 0.5091727002
...
=========================
Performance tests for JSON compression and pretty-printing
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To compress JNode from JSON string of 91926 took 4.01 +/- 0.346 ms over 64 trials (minimal whitespace, sort_keys=TRUE)
To compress JNode from JSON string of 91926 took 2.049 +/- 0.257 ms over 64 trials (minimal whitespace, sort_keys=FALSE)
To Google-style pretty-print JNode from JSON string of 91926 took 4.017 +/- 0.192 ms over 64 trials (sort_keys=true, indent=4)
To Whitesmith-style pretty-print JNode from JSON string of 91926 took 4.233 +/- 0.959 ms over 64 trials (sort_keys=true, indent=4)
To PPrint-style pretty-print JNode from JSON string of 91926 took 5.653 +/- 0.131 ms over 64 trials (sort_keys=true, indent=4)
=========================
Performance tests for JsonSchemaValidator and random JSON creation
=========================

To create a random set of tweet JSON of size 157471 (15 tweets) based on the matching schema took 5.858 +/- 2.727 ms over 64 trials
To compile the tweet schema to a validation function took 0.199 +/- 0.03 ms over 64 trials
To validate tweet JSON of size 157471 (15 tweets) based on the compiled schema took 0.975 +/- 0.162 ms over 64 trials
