Test results for JsonTools v6.1.1.17 on Notepad++ 8.5.8 64bit
NOTE: Ctrl-F (regular expressions *on*) for "Failed [1-9]\d*" to find all failed tests
Tests failed: YAML dumper
=========================
Testing JNode Copy method
=========================

Failed 0 tests.
Passed 12 tests.
=========================
Testing JSON parser
=========================

obj =
/*foo*/ //bar
{"a": ‚Åü[1, 2, 3], ¬†"b": {}, „ÄÄ"–ØËçâ": [], "üòÄ": [[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,//üòÄ
 [113, 114]]],/*c√∂mment*/"d":[{"o":"√∂yster"},"c√§t",#python 
"dog"],"e":false,//c√∂mment
"f":null}//baz 
# more python
/*quz
zuq*/

Failed 0 tests.
Passed 134 tests.
=========================
Testing if JSON parser throws errors on bad inputs
=========================

Failed 0 tests.
Passed 5 tests.
=========================
Testing JSON parser advanced options
=========================

Failed 0 tests.
Passed 29 tests.
=========================
Testing JSON parser's linter
=========================

Failed 0 tests.
Passed 70 tests.
=========================
Testing JSON Lines parser
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing parsing of numbers does not depend on current culture
=========================

Failed 0 tests.
Passed 1 tests.
=========================
Testing JsonParser.TryParseNumber method
=========================

Failed 0 tests.
Passed 39 tests.
=========================
Testing YAML dumper
=========================

Test 19 (Value contains quotes and colon) failed:
Expected
a: 'RT @blah: MondayMo"r''ing'

Got
a: "RT @blah: MondayMo\"r\'ing"

Test 20 (Value contains quotes and newline) failed:
Expected
a: "a\n'big'\ndog"

Got
a: "a\n\'big\'\ndog"

Test 22 (key contains quotes and colon) failed:
Expected
'"a: ''b''': a

Got
"\"a: ''b''": a

Failed 3 tests.
Passed 19 tests.
=========================
Testing slice extension
=========================

Failed 0 tests.
Passed 80 tests.
=========================
Testing Least Recently Used (LRU) cache implementation
=========================

Ran 15 tests for LruCache with size 5 and failed 0
Ran 30 tests for LruCache with size 10 and failed 0
Ran 51 tests for LruCache with size 17 and failed 0
Ran 135 tests for LruCache with size 45 and failed 0
Ran 192 tests for LruCache with size 64 and failed 0
=========================
Testing RemesPath parser and compiler
=========================

The queried JSON in the RemesParser tests is named foo:{"foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "quz": {}, "jub": [], "guzo": [[[1]], [[2], [3]]], "7": [{"foo": 2}, 1], "_": {"0": 0}}
Failed 0 tests.
Passed 513 tests.
=========================
Testing RemesPath throws errors on bad inputs
=========================

Failed 0 tests.
Passed 651 tests.
=========================
Testing RemesPath assignment operations
=========================

Failed 0 tests.
Passed 26 tests.
=========================
Testing RemesPath produces sane outputs on randomly generated queries
=========================

Fuzz tests query
{"a": [-4, -3., -2., -1, 0, 1, 2., 3., 4], "bc": NaN,"c`d": "df", "q": ["", "a", "jk", "ian", "", "32", "u", "aa", "moun"],"f": 1,"g": 1,"h": 1,"i": 1,"j": 1}
Ran 3750 fuzz tests
Failed 0 fuzz tests
=========================
Testing multi-statement queries in RemesPath
=========================

The queried JSON in the RemesParser complex query tests is named foo:{"foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "quz": {}, "jub": [], "guzo": [[[1]], [[2], [3]]], "7": [{"foo": 2}, 1], "_": {"0": 0}}
Failed 0 tests.
Passed 20 tests.
=========================
Testing JsonSchema generator
=========================

Failed 0 tests.
Passed 9 tests.
=========================
Testing JsonSchema validator
=========================

Failed 0 tests.
Passed 229 tests.
=========================
Testing JSON tabularizer
=========================

Failed 0 tests.
Passed 61 tests.
=========================
Testing JSON grepper's file reading ability
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing generation of random JSON from schema
=========================

Failed 0 tests.
Passed 16 tests.
=========================
Testing conversion of JSON to DSON (see https://dogeon.xyz/)
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing JNode PathToPosition method
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Testing INI file parser
=========================

Failed 0 tests.
Passed 28 tests.
=========================
Testing UI tests
=========================

Failed 0 tests
Passed 346 tests
=========================
Testing JsonParser performance
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To convert JSON string of size 89556 into JNode took 3.582 +/- 1.539 ms over 32 trials
Load times (ms): 3, 3, 5, 2, 3, 8, 2, 2, 2, 4, 2, 2, 6, 2, 2, 2, 4, 2, 2, 2, 4, 2, 2, 7, 2, 2, 3, 4, 2, 2, 4, 2
=========================
Performance tests for RemesPath (float arithmetic)
=========================

Compiling query "@[@[:].a * @[:].t < @[:].e]" took 0.138 ms the first time, including approximately 0.322 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@[@[:].a * @[:].t < @[:].e]" on JNode from JSON of size 89556 into took 0.045 +/- 0.017 ms over 40 trials
Query times (ms): 0.142, 0.079, 0.038, 0.039, 0.046, 0.039, 0.042, 0.062, 0.042, 0.039, 0.041, 0.04, 0.042, 0.052, 0.041, 0.041, 0.039, 0.042, 0.039, 0.048, 0.041, 0.039, 0.041, 0.041, 0.044, 0.048, 0.041, 0.041, 0.041, 0.04, 0.041, 0.044, 0.035, 0.033, 0.035, 0.034, 0.035, 0.05, 0.043, 0.039
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (string operations)
=========================

Compiling query "@[@[:].z =~ `(?i)[a-z]{5}`]" took 0.066 ms the first time, including approximately 0.073 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@[@[:].z =~ `(?i)[a-z]{5}`]" on JNode from JSON of size 89556 into took 0.217 +/- 0.691 ms over 40 trials
Query times (ms): 0.184, 0.138, 0.193, 0.172, 0.106, 0.116, 0.134, 0.121, 0.111, 0.122, 0.101, 0.097, 0.096, 0.1, 0.092, 0.094, 0.094, 0.084, 0.078, 0.081, 0.088, 0.094, 0.098, 0.099, 0.096, 0.098, 0.099, 0.101, 0.097, 0.097, 0.101, 0.1, 0.098, 4.528, 0.094, 0.088, 0.09, 0.101, 0.096, 0.098
Preview of result: [{"A": "\n]o1VQ5t6g", "a": 4710024278, "b": 3268860721, "B": "g4Y7+ew^.v", "C": "<E_7XL7YS`", "c": 4921465277, "d": 9420665097, "D": "Q&S>NK<OOn", "E": "M?6Ll1W\nFM", "e": 4146283970, "f": 8384193493, "F": "z[jPvslL\tc", "g": 1578133296, "G": "m'M4h,`|Wk", "H": {"a": 5184250383, "b": 5337791147, "c"
...
=========================
Performance tests for RemesPath (basic recursive search)
=========================

Compiling query "@..*" took 0.023 ms the first time, including approximately 0.042 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@..*" on JNode from JSON of size 89556 into took 0.404 +/- 0.436 ms over 40 trials
Query times (ms): 0.421, 0.328, 0.314, 0.33, 0.324, 0.325, 0.329, 0.383, 0.405, 0.447, 0.363, 0.307, 0.308, 0.305, 0.307, 0.307, 0.305, 0.327, 0.331, 0.307, 0.308, 0.301, 0.379, 0.392, 0.418, 0.38, 0.396, 3.114, 0.324, 0.308, 0.319, 0.3, 0.318, 0.299, 0.314, 0.309, 0.301, 0.309, 0.294, 0.3
Preview of result: [1850111954, 9318359041, 7974777124, 2670309238, 6958410336, 8050244728, 3799657125, 2612807147, 7785993340, 9842767454, 2257474583, 2736529372, 4821265864, 3302084501, null, Infinity, true, false, true, 0.201077552261751, 0.110978036654776, 0.50917270025261, 0.798199326980627, 0.615212956451379, 0.
...
=========================
Performance tests for RemesPath (group_by, projections and aggregations)
=========================

Compiling query "group_by(@, s).*{
    Hmax: max((@[:].H)..*[is_num(@)][abs(@) < Infinity]),
    min_N: min((@[:].N)..*[is_num(@)][abs(@) < Infinity])
}" took 0.241 ms the first time, including approximately 0.23 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "group_by(@, s).*{
    Hmax: max((@[:].H)..*[is_num(@)][abs(@) < Infinity]),
    min_N: min((@[:].N)..*[is_num(@)][abs(@) < Infinity])
}" on JNode from JSON of size 89556 into took 0.327 +/- 0.149 ms over 40 trials
Query times (ms): 0.393, 0.276, 0.244, 0.239, 0.237, 0.722, 0.238, 0.232, 0.242, 0.236, 0.238, 0.254, 0.245, 0.652, 0.238, 0.228, 0.239, 0.241, 0.238, 0.245, 0.237, 0.642, 0.236, 0.234, 0.235, 0.244, 0.296, 0.317, 0.336, 0.719, 0.31, 0.312, 0.31, 0.41, 0.427, 0.351, 0.288, 0.746, 0.286, 0.27
Preview of result: {"false": {"Hmax": 9703256074.0, "min_N": 0.0395243372266771}, "true": {"Hmax": 9695512197.0, "min_N": 0.0231773915713427}}
...
=========================
Performance tests for RemesPath (variable assignments and simple aggregations)
=========================

Compiling query "var qmask = @[:].q;
var nmax_q = max(@[qmask].n);
var nmax_notq = max(@[not qmask].n);
ifelse(nmax_q > nmax_notq, `when q=true, nmax = ` + str(nmax_q), `when q=false, nmax= ` + str(nmax_notq))" took 0.28 ms the first time, including approximately 0.253 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "var qmask = @[:].q;
var nmax_q = max(@[qmask].n);
var nmax_notq = max(@[not qmask].n);
ifelse(nmax_q > nmax_notq, `when q=true, nmax = ` + str(nmax_q), `when q=false, nmax= ` + str(nmax_notq))" on JNode from JSON of size 89556 into took 0.034 +/- 0.012 ms over 40 trials
Query times (ms): 0.099, 0.03, 0.032, 0.03, 0.03, 0.05, 0.062, 0.032, 0.032, 0.032, 0.033, 0.031, 0.03, 0.032, 0.03, 0.031, 0.03, 0.03, 0.029, 0.032, 0.03, 0.032, 0.03, 0.031, 0.042, 0.033, 0.03, 0.03, 0.03, 0.031, 0.031, 0.03, 0.031, 0.03, 0.03, 0.03, 0.033, 0.032, 0.031, 0.031
Preview of result: "when q=false, nmax= 9830935647.0"
...
=========================
Performance tests for RemesPath (references to compile-time constant variables)
=========================

Compiling query "var X = X;
var onetwo = j`[1, 2]`;
@[:]->at(@, X)->at(@, onetwo)" took 0.126 ms the first time, including approximately 0.133 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "var X = X;
var onetwo = j`[1, 2]`;
@[:]->at(@, X)->at(@, onetwo)" on JNode from JSON of size 89556 into took 0.043 +/- 0.099 ms over 40 trials
Query times (ms): 0.078, 0.025, 0.024, 0.024, 0.024, 0.023, 0.023, 0.026, 0.025, 0.022, 0.036, 0.025, 0.052, 0.025, 0.026, 0.027, 0.026, 0.025, 0.024, 0.024, 0.026, 0.025, 0.027, 0.024, 0.024, 0.024, 0.023, 0.656, 0.032, 0.024, 0.025, 0.024, 0.024, 0.025, 0.024, 0.025, 0.025, 0.026, 0.025, 0.027
Preview of result: [[1695727848, 0.287562638736685], [2126430375, 0.00767794129708177], [5310550656, 0.380769772645687], [2519183283, 0.153176220930558], [6610062385, 0.662996225870666], [987168256, 0.924410189999928], [6615003609, 0.917112691225947], [4465232046, 0.684311931851536], [8654414565, 0.631485392105992], [
...
=========================
Performance tests for RemesPath (references to variables that are not compile-time constants)
=========================

Compiling query "var X = @->`X`;
var onetwo = @{1, 2};
@[:]->at(@, X)->at(@, onetwo)" took 0.172 ms the first time, including approximately 0.143 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "var X = @->`X`;
var onetwo = @{1, 2};
@[:]->at(@, X)->at(@, onetwo)" on JNode from JSON of size 89556 into took 0.04 +/- 0.013 ms over 40 trials
Query times (ms): 0.114, 0.036, 0.035, 0.034, 0.03, 0.045, 0.036, 0.065, 0.034, 0.035, 0.033, 0.034, 0.035, 0.036, 0.036, 0.037, 0.038, 0.036, 0.035, 0.035, 0.035, 0.036, 0.036, 0.034, 0.036, 0.038, 0.042, 0.035, 0.041, 0.048, 0.05, 0.038, 0.042, 0.033, 0.048, 0.034, 0.034, 0.038, 0.035, 0.035
Preview of result: [[1695727848, 0.287562638736685], [2126430375, 0.00767794129708177], [5310550656, 0.380769772645687], [2519183283, 0.153176220930558], [6610062385, 0.662996225870666], [987168256, 0.924410189999928], [6615003609, 0.917112691225947], [4465232046, 0.684311931851536], [8654414565, 0.631485392105992], [
...
=========================
Performance tests for RemesPath (simple string mutations)
=========================

Compiling query "@[:].z = s_sub(@, g, B)" took 0.08 ms the first time, including approximately 0.08 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@[:].z = s_sub(@, g, B)" on JNode from JSON of size 89556 into took 0.031 +/- 0.006 ms over 40 trials
Query times (ms): 0.041, 0.03, 0.033, 0.028, 0.03, 0.027, 0.027, 0.033, 0.03, 0.032, 0.026, 0.031, 0.034, 0.033, 0.033, 0.034, 0.042, 0.027, 0.045, 0.036, 0.044, 0.033, 0.034, 0.027, 0.026, 0.034, 0.032, 0.026, 0.026, 0.038, 0.026, 0.038, 0.026, 0.024, 0.024, 0.024, 0.023, 0.026, 0.027, 0.026
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (simple number mutations)
=========================

Compiling query "@[:].x = ifelse(@ < 0.5, @ + 3, @ - 3)" took 0.107 ms the first time, including approximately 0.126 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "@[:].x = ifelse(@ < 0.5, @ + 3, @ - 3)" on JNode from JSON of size 89556 into took 0.045 +/- 0.011 ms over 40 trials
Query times (ms): 0.086, 0.054, 0.043, 0.041, 0.041, 0.054, 0.038, 0.042, 0.042, 0.061, 0.04, 0.041, 0.041, 0.054, 0.054, 0.056, 0.038, 0.039, 0.04, 0.038, 0.036, 0.034, 0.035, 0.036, 0.034, 0.041, 0.037, 0.044, 0.053, 0.046, 0.043, 0.083, 0.038, 0.04, 0.04, 0.038, 0.037, 0.041, 0.041, 0.048
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (mutations with a for loop)
=========================

Compiling query "var xhalf = @[:].x < 0.5;
for lx = zip(@[:].l, xhalf);
    lx[0] = ifelse(lx[1], foo, bar);
end for;" took 0.283 ms the first time, including approximately 0.256 ms to tokenize the query. Subsequent executions are effectively free due to caching.
To run pre-compiled query "var xhalf = @[:].x < 0.5;
for lx = zip(@[:].l, xhalf);
    lx[0] = ifelse(lx[1], foo, bar);
end for;" on JNode from JSON of size 89556 into took 0.086 +/- 0.01 ms over 40 trials
Query times (ms): 0.102, 0.087, 0.08, 0.08, 0.08, 0.076, 0.1, 0.081, 0.08, 0.078, 0.08, 0.082, 0.084, 0.085, 0.08, 0.08, 0.08, 0.108, 0.112, 0.095, 0.094, 0.098, 0.102, 0.083, 0.08, 0.085, 0.081, 0.082, 0.083, 0.082, 0.102, 0.083, 0.084, 0.079, 0.076, 0.077, 0.106, 0.08, 0.074, 0.097
Preview of result: [["bar", false], ["bar", false], ["foo", true], ["foo", true], ["foo", true], ["foo", true], ["foo", true], ["bar", false], ["bar", false], ["bar", false], ["foo", true], ["foo", true], ["bar", false], ["bar", false], ["foo", true], ["bar", false], ["bar", false], ["bar", false], ["foo", true], ["ba
...
=========================
Testing performance of JSON compression and pretty-printing
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To compress JNode from JSON string of 89556 took 6.705 +/- 1.061 ms over 64 trials (minimal whitespace, sortKeys=TRUE)
To compress JNode from JSON string of 89556 took 3.375 +/- 0.63 ms over 64 trials (minimal whitespace, sortKeys=FALSE)
To Google-style pretty-print JNode from JSON string of 89556 took 5.128 +/- 1.17 ms over 64 trials (sortKeys=true, indent=4)
To Whitesmith-style pretty-print JNode from JSON string of 89556 took 4.666 +/- 0.963 ms over 64 trials (sortKeys=true, indent=4)
To PPrint-style pretty-print JNode from JSON string of 89556 took 6.79 +/- 1.481 ms over 64 trials (sortKeys=true, indent=4)
=========================
Testing performance of JsonSchemaValidator and random JSON creation
=========================

To create a random set of tweet JSON of size 168533 (15 tweets) based on the matching schema took 7.121 +/- 3.459 ms over 64 trials
To compile the tweet schema to a validation function took 0.616 +/- 1.49 ms over 64 trials
To validate tweet JSON of size 168533 (15 tweets) based on the compiled schema took 1.166 +/- 0.322 ms over 64 trials
=========================
Testing JSON grepper's API request tool
=========================

Testing with 3 urls
Testing with 1 urls
Failed 0 tests.
Passed 4 tests.
