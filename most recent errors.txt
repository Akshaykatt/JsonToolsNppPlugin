Test results for JsonTools v5.7.0.3 on Notepad++ 8.5.7 64bit
NOTE: Ctrl-F (regular expressions *on*) for "Failed [1-9]\d*" to find all failed tests
Tests failed: YAML dumper
=========================
Testing JNode Copy method
=========================

Failed 0 tests.
Passed 12 tests.
=========================
Testing JSON parser
=========================

obj =
/*foo*/ //bar
{"a": ‚Åü[1, 2, 3], ¬†"b": {}, „ÄÄ"–ØËçâ": [], "üòÄ": [[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,//üòÄ
 [113, 114]]],/*c√∂mment*/"d":[{"o":"√∂yster"},"c√§t",#python 
"dog"],"e":false,//c√∂mment
"f":null}//baz 
# more python
/*quz
zuq*/

Failed 0 tests.
Passed 125 tests.
=========================
Testing if JSON parser throws errors on bad inputs
=========================

Failed 0 tests.
Passed 5 tests.
=========================
Testing JSON parser advanced options (javascript comments, dates, datetimes, singlequoted strings)
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Testing JSON parser's linter functionality
=========================

Failed 0 tests.
Passed 55 tests.
=========================
Testing JSON Lines parser
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing that parsing of numbers does not depend on current culture
=========================

Failed 0 tests.
Passed 1 tests.
=========================
Testing YAML dumper
=========================

Test 7 (singlequotes and doublequotes inside key) failed:
Expected
a"b': "bub\"ar"

Got
a\"b': "bub\"ar"

Test 19 (Value contains quotes and colon) failed:
Expected
a: 'RT @blah: MondayMo"r''ing'

Got
a: "RT @blah: MondayMo\"r\'ing"

Test 20 (Value contains quotes and newline) failed:
Expected
a: "a\n'big'\ndog"

Got
a: "a\n\'big\'\ndog"

Test 22 (key contains quotes and colon) failed:
Expected
'"a: ''b''': a

Got
"\\\"a: ''b''": a

Failed 4 tests.
Passed 18 tests.
=========================
Testing slice extension
=========================

Failed 0 tests.
Passed 80 tests.
=========================
Testing Least Recently Used (LRU) cache implementation
=========================

Ran 15 tests for LruCache with size 5 and failed 0
Ran 30 tests for LruCache with size 10 and failed 0
Ran 51 tests for LruCache with size 17 and failed 0
Ran 135 tests for LruCache with size 45 and failed 0
Ran 192 tests for LruCache with size 64 and failed 0
=========================
Testing RemesPath parser and compiler
=========================

The queried JSON in the RemesParser tests is named foo:{"foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "quz": {}, "jub": [], "guzo": [[[1]], [[2], [3]]], "7": [{"foo": 2}, 1], "_": {"0": 0}}
Failed 0 tests.
Passed 406 tests.
=========================
Testing that RemesPath throws errors on bad inputs
=========================

Failed 0 tests.
Passed 639 tests.
=========================
Testing RemesPath assignment operations
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Testing that RemesPath produces sane outputs on randomly generated queries
=========================

Fuzz tests query
{"a": [-4, -3., -2., -1, 0, 1, 2., 3., 4], "bc": NaN,"c`d": "df", "q": ["", "a", "jk", "ian", "", "32", "u", "aa", "moun"],"f": 1,"g": 1,"h": 1,"i": 1,"j": 1}
Ran 10000 fuzz tests
Failed 0 fuzz tests
=========================
Testing multi-statement queries in RemesPath
=========================

The queried JSON in the RemesParser complex query tests is named foo:{"foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "quz": {}, "jub": [], "guzo": [[[1]], [[2], [3]]], "7": [{"foo": 2}, 1], "_": {"0": 0}}
Failed 0 tests.
Passed 6 tests.
=========================
Testing JsonSchema generator
=========================

Failed 0 tests.
Passed 9 tests.
=========================
Testing JsonSchema validator
=========================

Failed 0 tests.
Passed 224 tests.
=========================
Testing JSON tabularizer
=========================

Failed 0 tests.
Passed 62 tests.
=========================
Testing JSON grepper's file reading ability
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing JSON grepper's API request tool
=========================

Testing with 3 urls
Testing with 1 urls
Failed 0 tests.
Passed 4 tests.
=========================
Testing generation of random JSON from schema
=========================

Failed 0 tests.
Passed 16 tests.
=========================
Testing conversion of JSON to DSON (see https://dogeon.xyz/)
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing JNode PathToPosition method
=========================

Failed 0 tests.
Passed 24 tests.
=========================
Performing UI tests by faking user actions
=========================

Failed 0 tests
Passed 194 tests
=========================
Performance tests for JsonParser
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To convert JSON string of size 89556 into JNode took 2.828 +/- 2.944 ms over 32 trials
Load times (ms): 2, 17, 2, 1, 3, 1, 2, 5, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1, 2, 1, 1, 5, 1, 1, 1
=========================
Performance tests for RemesPath (float arithmetic)
=========================

Compiling query "@[@[:].a * @[:].t < @[:].e]" into took 1.194 +/- 8.959 microseconds over 64 trials
To run pre-compiled query "@[@[:].a * @[:].t < @[:].e]" on JNode from JSON of size 89556 into took 0.024 +/- 0.004 ms over 64 trials
Query times (ms): 0.048, 0.029, 0.023, 0.023, 0.023, 0.022, 0.023, 0.022, 0.022, 0.023, 0.022, 0.025, 0.023, 0.041, 0.023, 0.023, 0.022, 0.023, 0.022, 0.022, 0.022, 0.024, 0.023, 0.023, 0.023, 0.022, 0.022, 0.022, 0.022, 0.022, 0.022, 0.023, 0.023, 0.023, 0.023, 0.023, 0.023, 0.022, 0.033, 0.022, 0.023, 0.024, 0.023, 0.024, 0.023, 0.023, 0.022, 0.023, 0.022, 0.026, 0.022, 0.024, 0.023, 0.023, 0.023, 0.023, 0.023, 0.031, 0.023, 0.023, 0.022, 0.024, 0.024, 0.023
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (string operations)
=========================

Compiling query "@[@[:].z =~ `(?i)[a-z]{5}`]" into took 1.053 +/- 7.843 microseconds over 64 trials
To run pre-compiled query "@[@[:].z =~ `(?i)[a-z]{5}`]" on JNode from JSON of size 89556 into took 0.057 +/- 0.02 ms over 64 trials
Query times (ms): 0.117, 0.082, 0.075, 0.056, 0.059, 0.193, 0.058, 0.053, 0.053, 0.052, 0.053, 0.052, 0.052, 0.053, 0.052, 0.052, 0.052, 0.052, 0.051, 0.052, 0.052, 0.052, 0.052, 0.065, 0.052, 0.052, 0.052, 0.051, 0.052, 0.052, 0.052, 0.052, 0.052, 0.052, 0.052, 0.052, 0.051, 0.052, 0.052, 0.052, 0.052, 0.065, 0.054, 0.052, 0.053, 0.052, 0.052, 0.051, 0.052, 0.052, 0.059, 0.052, 0.052, 0.052, 0.052, 0.052, 0.052, 0.052, 0.052, 0.065, 0.051, 0.052, 0.052, 0.052
Preview of result: [{"A": "\n]o1VQ5t6g", "a": 4710024278, "b": 3268860721, "B": "g4Y7+ew^.v", "C": "<E_7XL7YS`", "c": 4921465277, "d": 9420665097, "D": "Q&S>NK<OOn", "E": "M?6Ll1W\nFM", "e": 4146283970, "f": 8384193493, "F": "z[jPvslL\tc", "g": 1578133296, "G": "m'M4h,`|Wk", "H": {"a": 5184250383, "b": 5337791147, "c"
...
=========================
Performance tests for RemesPath (basic recursive search)
=========================

Compiling query "@..*" into took 0.603 +/- 4.397 microseconds over 64 trials
To run pre-compiled query "@..*" on JNode from JSON of size 89556 into took 0.288 +/- 0.314 ms over 64 trials
Query times (ms): 0.284, 0.262, 0.228, 0.227, 0.232, 0.234, 0.217, 0.218, 0.22, 0.809, 0.221, 0.241, 0.226, 0.226, 0.227, 0.247, 0.23, 0.229, 0.247, 2.691, 0.241, 0.252, 0.222, 0.226, 0.223, 0.23, 0.222, 0.219, 0.219, 0.219, 0.24, 0.451, 0.234, 0.215, 0.218, 0.216, 0.3, 0.295, 0.214, 0.215, 0.214, 0.407, 0.226, 0.226, 0.233, 0.223, 0.223, 0.221, 0.231, 0.211, 0.207, 0.211, 0.268, 0.431, 0.228, 0.222, 0.229, 0.215, 0.214, 0.215, 0.224, 0.216, 0.218, 0.349
Preview of result: [1850111954, 9318359041, 7974777124, 2670309238, 6958410336, 8050244728, 3799657125, 2612807147, 7785993340, 9842767454, 2257474583, 2736529372, 4821265864, 3302084501, null, Infinity, true, false, true, 0.201077552261751, 0.110978036654776, 0.50917270025261, 0.798199326980627, 0.615212956451379, 0.
...
=========================
Performance tests for JSON compression and pretty-printing
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To compress JNode from JSON string of 89556 took 4.475 +/- 0.755 ms over 64 trials (minimal whitespace, sort_keys=TRUE)
To compress JNode from JSON string of 89556 took 2.453 +/- 0.367 ms over 64 trials (minimal whitespace, sort_keys=FALSE)
To Google-style pretty-print JNode from JSON string of 89556 took 4.706 +/- 0.541 ms over 64 trials (sort_keys=true, indent=4)
To Whitesmith-style pretty-print JNode from JSON string of 89556 took 4.91 +/- 0.82 ms over 64 trials (sort_keys=true, indent=4)
To PPrint-style pretty-print JNode from JSON string of 89556 took 6.622 +/- 0.718 ms over 64 trials (sort_keys=true, indent=4)
=========================
Performance tests for JsonSchemaValidator and random JSON creation
=========================

To create a random set of tweet JSON of size 203949 (15 tweets) based on the matching schema took 6.4 +/- 3.15 ms over 64 trials
To compile the tweet schema to a validation function took 0.336 +/- 0.686 ms over 64 trials
To validate tweet JSON of size 203949 (15 tweets) based on the compiled schema took 1.096 +/- 0.354 ms over 64 trials
