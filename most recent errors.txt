=========================
Testing JSON parser
=========================

Failed 0 tests.
Passed 45 tests.
=========================
Testing JSON parser advanced options (javascript comments, dates, datetimes, singlequoted strings)
=========================

Failed 0 tests.
Passed 14 tests.
=========================
Testing JSON parser's linter functionality
=========================

Failed 0 tests.
Passed 10 tests.
=========================
Testing YAML dumper
=========================

Test 7 (singlequotes and doublequotes inside key) failed:
Expected
a"b': "bub\"ar"

Got
a\"b': "bub\"ar"

Test 19 (Value contains quotes and colon) failed:
Expected
a: 'RT @blah: MondayMo"r''ing'

Got
a: "RT @blah: MondayMo\"r\'ing"

Test 20 (Value contains quotes and newline) failed:
Expected
a: "a\n'big'\ndog"

Got
a: "a\n\'big\'\ndog"

Test 22 (key contains quotes and colon) failed:
Expected
'"a: ''b''': a

Got
"\\\"a: ''b''": a

Failed 4 tests.
Passed 18 tests.
=========================
Testing Binops
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing ArgFunctions
=========================

Failed 0 tests.
Passed 4 tests.
=========================
Testing slice extension
=========================

Failed 0 tests.
Passed 70 tests.
=========================
Testing RemesPath lexer
=========================

Failed 0 tests.
Passed 21 tests.
=========================
Testing RemesPath parser and compiler
=========================

The queried JSON in the RemesParser tests is:{"_": {"0": 0}, "7": [{"foo": 2}, 1], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "guzo": [[[1]], [[2], [3]]], "jub": [], "quz": {}}
Expected remesparser.Search(log(@.foo[0] + 1), foo) to return [0.0, 0.693147180559945, 1.09861228866811], but instead got [0.0, 0.693147180559945, 1.09861228866811].
Expected remesparser.Search(log2(@.foo[1]), foo) to return [1.58496250072116, 2.0, 2.32192809488736], but instead got [1.58496250072116, 2.0, 2.32192809488736].
Expected remesparser.Search(range(0, -len(@) + len(@)), foo) to return [], but instead threw an exception:
For arg 1 of function range, expected argument of type in INT, instead threw exception For arg 1 of function range, expected argument of type in INT, instead got type FLOAT
Details:
Exception of type 'JSON_Tools.JSON_Tools.RemesPathException' was thrown..
Details:
Exception of type 'JSON_Tools.JSON_Tools.RemesPathException' was thrown.
Expected remesparser.Search(range(0, -len(@) - len(@)), foo) to return [], but instead threw an exception:
For arg 1 of function range, expected argument of type in INT, instead threw exception For arg 1 of function range, expected argument of type in INT, instead got type FLOAT
Details:
Exception of type 'JSON_Tools.JSON_Tools.RemesPathException' was thrown..
Details:
Exception of type 'JSON_Tools.JSON_Tools.RemesPathException' was thrown.
Expected remesparser.Search(range(0, -len(@) * len(@)), foo) to return [], but instead threw an exception:
For arg 1 of function range, expected argument of type in INT, instead threw exception For arg 1 of function range, expected argument of type in INT, instead got type FLOAT
Details:
Exception of type 'JSON_Tools.JSON_Tools.RemesPathException' was thrown..
Details:
Exception of type 'JSON_Tools.JSON_Tools.RemesPathException' was thrown.
Failed 5 tests.
Passed 126 tests.
=========================
Testing JsonSchema generator
=========================

Expected the schema for [1, "1"] to be
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"type": ["integer", "string"]}, "type": "array"}
Instead got
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"type": ["string", "integer"]}, "type": "array"}
Expected the schema for [{"a": 1, "b": "w", "c": 1.0}, {"a": "2", "b": "v"}] to be
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"properties": {"a": {"type": ["integer", "string"]}, "b": {"type": "string"}, "c": {"type": "number"}}, "required": ["a", "b"], "type": "object"}, "type": "array"}
Instead got
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"properties": {"a": {"type": ["string", "integer"]}, "b": {"type": "string"}, "c": {"type": "number"}}, "required": ["a", "b"], "type": "object"}, "type": "array"}
Expected the schema for [[1, 2.0, {"a": 1}]] to be
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"items": {"anyOf": [{"type": "integer"}, {"type": "number"}, {"properties": {"a": {"type": "integer"}}, "required": ["a"], "type": "object"}]}, "type": "array"}, "type": "array"}
Instead got
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"items": {"anyOf": [{"properties": {"a": {"type": "integer"}}, "required": ["a"], "type": "object"}, {"type": "number"}, {"type": "integer"}]}, "type": "array"}, "type": "array"}
Expected the schema for [{"a": 3},{"a": 1,"b": [{"a": {"b": 1,"c": 2}},{"a": {"b": 1}}]},{"a": 1,"b": [{"a": {"b": 1,"c": 2,"d": 3}}]},{"a": 2,"c": 3}] to be
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"properties": {"a": {"type": "integer"}, "b": {"items": {"properties": {"a": {"properties": {"b": {"type": "integer"}, "c": {"type": "integer"}, "d": {"type": "integer"}}, "required": ["b"], "type": "object"}}, "required": ["a"], "type": "object"}, "type": "array"}, "c": {"type": "integer"}}, "required": ["a"], "type": "object"}, "type": "array"}
Instead got
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"properties": {"a": {"type": "integer"}, "b": {"items": {"properties": {"a": {"properties": {"b": {"type": "integer"}, "c": {"type": "integer"}, "d": {"type": "integer"}}, "required": ["b", "c", "d"], "type": "object"}}, "required": ["a"], "type": "object"}, "type": "array"}, "c": {"type": "integer"}}, "required": ["a"], "type": "object"}, "type": "array"}
Failed 4 tests.
Passed 1 tests.
=========================
Testing JSON tabularizer
=========================

Expected BuildTable([{"a": 1, "b": "foo", "c": [{"d": 1, "e": "a"}, {"d": 2, "e": "b"}]}, {"a": 2, "b": "bar", "c": [{"d": 3, "e": "c"}, {"d": 4, "e": "d"}]}])
to return
[{"a": 1, "b": "foo", "c.d": 1, "c.e": "a"}, {"a": 1, "b": "foo", "c.d": 2, "c.e": "b"}, {"a": 2, "b": "bar", "c.d": 3, "c.e": "c"}, {"a": 2, "b": "bar", "c.d": 4, "c.e": "d"}]
Instead threw exception
System.InvalidCastException: Specified cast is not valid.
   at JSON_Tools.JSON_Tools.JNode.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JArray.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchema(Dictionary`2 schema)
   at JSON_Tools.JSON_Tools.JsonTabularizer.BuildTable(JNode obj, Dictionary`2 schema, String key_sep)
   at JSON_Tools.Tests.JsonTabularizerTester.Test()
Expected BuildTable([{"name": "foo", "players": [{"at-bats": [3, 4], "hits": [1, 2], "name": "alice"}, {"at-bats": [3], "hits": [2], "name": "bob"}]}, {"name": "bar", "players": [{"at-bats": [2, 3], "hits": [1], "name": "carol"}]}])
to return
[{"name": "foo", "players.at-bats": 3, "players.hits": 1, "players.name": "alice"}, {"name": "foo", "players.at-bats": 4, "players.hits": 2, "players.name": "alice"}, {"name": "foo", "players.at-bats": 3, "players.hits": 2, "players.name": "bob"}, {"name": "bar", "players.at-bats": 2, "players.hits": 1, "players.name": "carol"}, {"name": "bar", "players.at-bats": 3, "players.hits": "", "players.name": "carol"}]
Instead threw exception
System.InvalidCastException: Specified cast is not valid.
   at JSON_Tools.JSON_Tools.JNode.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JArray.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchema(Dictionary`2 schema)
   at JSON_Tools.JSON_Tools.JsonTabularizer.BuildTable(JNode obj, Dictionary`2 schema, String key_sep)
   at JSON_Tools.Tests.JsonTabularizerTester.Test()
Expected BuildTable({"leagues": [{"league": "American", "teams": [{"name": "foo", "players": [{"at-bats": [3], "hits": [1], "name": "alice"}]}, {"name": "bar", "players": [{"at-bats": [2], "hits": [1], "name": "carol"}]}]}, {"league": "National", "teams": [{"name": "baz", "players": [{"at-bats": [3], "hits": [2], "name": "bob"}]}]}]})
to return
[{"leagues.league": "American", "leagues.teams.name": "foo", "leagues.teams.players.at-bats": 3, "leagues.teams.players.hits": 1, "leagues.teams.players.name": "alice"}, {"leagues.league": "American", "leagues.teams.name": "bar", "leagues.teams.players.at-bats": 2, "leagues.teams.players.hits": 1, "leagues.teams.players.name": "carol"}, {"leagues.league": "National", "leagues.teams.name": "baz", "leagues.teams.players.at-bats": 3, "leagues.teams.players.hits": 2, "leagues.teams.players.name": "bob"}]
Instead threw exception
System.InvalidCastException: Specified cast is not valid.
   at JSON_Tools.JSON_Tools.JNode.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JArray.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchema(Dictionary`2 schema)
   at JSON_Tools.JSON_Tools.JsonTabularizer.BuildTable(JNode obj, Dictionary`2 schema, String key_sep)
   at JSON_Tools.Tests.JsonTabularizerTester.Test()
Expected BuildTable({"a": [{"name": "blah", "rows": [[1, 2, "a"], [1, 2, "a"]]}]})
to return
[{"a.name": "blah", "a.rows.col1": 1, "a.rows.col2": 2, "a.rows.col3": "a"}, {"a.name": "blah", "a.rows.col1": 1, "a.rows.col2": 2, "a.rows.col3": "a"}]
Instead threw exception
System.InvalidCastException: Specified cast is not valid.
   at JSON_Tools.JSON_Tools.JNode.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JArray.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchema(Dictionary`2 schema)
   at JSON_Tools.JSON_Tools.JsonTabularizer.BuildTable(JNode obj, Dictionary`2 schema, String key_sep)
   at JSON_Tools.Tests.JsonTabularizerTester.Test()
Expected BuildTable({"stuff": [{"name": "blah", "substuff": [{"a": 1, "b": "foo", "c": [{"d": 1, "e": "a"}]}, {"a": 2, "b": "bar", "c": [{"d": 3, "e": "c"}]}]}, {"name": "wuz", "substuff": [{"a": 3, "b": "baz", "c": [{"d": 4, "e": "f"}]}]}]})
to return
[{"stuff_name": "blah", "stuff_substuff_a": 1, "stuff_substuff_b": "foo", "stuff_substuff_c_d": 1, "stuff_substuff_c_e": "a"}, {"stuff_name": "blah", "stuff_substuff_a": 2, "stuff_substuff_b": "bar", "stuff_substuff_c_d": 3, "stuff_substuff_c_e": "c"}, {"stuff_name": "wuz", "stuff_substuff_a": 3, "stuff_substuff_b": "baz", "stuff_substuff_c_d": 4, "stuff_substuff_c_e": "f"}]
Instead threw exception
System.InvalidCastException: Specified cast is not valid.
   at JSON_Tools.JSON_Tools.JNode.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JArray.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchema(Dictionary`2 schema)
   at JSON_Tools.JSON_Tools.JsonTabularizer.BuildTable(JNode obj, Dictionary`2 schema, String key_sep)
   at JSON_Tools.Tests.JsonTabularizerTester.Test()
Expected BuildTable([{"a": 1, "b": "foo", "c": [{"d": 1, "e": "a"}]}, {"a": 2, "b": "bar", "c": [{"d": 3, "e": "c"}]}])
to return
[{"a": 1, "b": "foo", "c/d": 1, "c/e": "a"}, {"a": 2, "b": "bar", "c/d": 3, "c/e": "c"}]
Instead threw exception
System.InvalidCastException: Specified cast is not valid.
   at JSON_Tools.JSON_Tools.JNode.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JArray.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchema(Dictionary`2 schema)
   at JSON_Tools.JSON_Tools.JsonTabularizer.BuildTable(JNode obj, Dictionary`2 schema, String key_sep)
   at JSON_Tools.Tests.JsonTabularizerTester.Test()
Expected BuildTable([{"a": 1, "b": [1], "c": {"d": "y"}}, {"a": true, "b": [7, 8]}, {"a": false, "b": [9]}])
to return
[{"a": 1, "b": 1, "c.d": "y"}, {"a": true, "b": 7}, {"a": true, "b": 8}, {"a": false, "b": 9}]
Instead threw exception
System.InvalidCastException: Specified cast is not valid.
   at JSON_Tools.JSON_Tools.JNode.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JArray.ToString(Boolean sort_keys)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchemaHelper(Dictionary`2 schema, List`1 path, Dictionary`2 tab_paths)
   at JSON_Tools.JSON_Tools.JsonTabularizer.FindTabsInSchema(Dictionary`2 schema)
   at JSON_Tools.JSON_Tools.JsonTabularizer.BuildTable(JNode obj, Dictionary`2 schema, String key_sep)
   at JSON_Tools.Tests.JsonTabularizerTester.Test()
Failed 7 tests.
Passed 41 tests.
=========================
Testing JSON grepper's file reading ability
=========================

Test 4 (grepper.ReadJsonFiles(C:\Users\mjols\Documents\csharp\JSONToolsPlugin\testfiles\small\subsmall, True, *.txt)) failed:
Expected to find files
[
"C:\\Users\\mjols\\Documents\\csharp\\JSONToolsPlugin\\testfiles\\small\\subsmall\\json_as_txt.txt"
]
Got files
[
"C:\\Users\\mjols\\Documents\\csharp\\JSONToolsPlugin\\testfiles\\small\\subsmall\\comment_json_as_txt.txt",
"C:\\Users\\mjols\\Documents\\csharp\\JSONToolsPlugin\\testfiles\\small\\subsmall\\json_as_txt.txt",
"C:\\Users\\mjols\\Documents\\csharp\\JSONToolsPlugin\\testfiles\\small\\subsmall\\singlequote_json_as_txt.txt"
]
Failed 1 tests.
Passed 5 tests.
=========================
Performance tests for JsonParser and RemesPath
=========================

