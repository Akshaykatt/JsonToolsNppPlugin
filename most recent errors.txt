=========================
Testing JNode Copy method
=========================

Failed 0 tests.
Passed 12 tests.
=========================
Testing JSON parser
=========================

Failed 0 tests.
Passed 53 tests.
=========================
Testing if JSON parser throws errors on bad inputs
=========================

Failed 0 tests.
Passed 4 tests.
=========================
Testing JSON parser advanced options (javascript comments, dates, datetimes, singlequoted strings)
=========================

Failed 0 tests.
Passed 14 tests.
=========================
Testing JSON parser's linter functionality
=========================

Expected JsonParser(true, true, true, true).Parse({)
to return
{} and have lint [Unexpected end of JSON]
Instead threw exception
Unexpected end of JSON at position 0 (char '{')
Expected JsonParser(true, true, true, true).Parse([)
to return
[] and have lint [Unexpected end of JSON]
Instead threw exception
Unexpected end of JSON at position 0 (char '[')
Failed 2 tests.
Passed 13 tests.
=========================
Testing JSON Lines parser
=========================

Failed 0 tests.
Passed 8 tests.
=========================
Testing YAML dumper
=========================

Test 7 (singlequotes and doublequotes inside key) failed:
Expected
a"b': "bub\"ar"

Got
a\"b': "bub\"ar"

Test 19 (Value contains quotes and colon) failed:
Expected
a: 'RT @blah: MondayMo"r''ing'

Got
a: "RT @blah: MondayMo\"r\'ing"

Test 20 (Value contains quotes and newline) failed:
Expected
a: "a\n'big'\ndog"

Got
a: "a\n\'big\'\ndog"

Test 22 (key contains quotes and colon) failed:
Expected
'"a: ''b''': a

Got
"\\\"a: ''b''": a

Failed 4 tests.
Passed 18 tests.
=========================
Testing Binops
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing ArgFunctions
=========================

Failed 0 tests.
Passed 4 tests.
=========================
Testing slice extension
=========================

Failed 0 tests.
Passed 70 tests.
=========================
Testing RemesPath lexer
=========================

Failed 0 tests.
Passed 26 tests.
=========================
Testing RemesPath parser and compiler
=========================

The queried JSON in the RemesParser tests is:{"_": {"0": 0}, "7": [{"foo": 2}, 1], "bar": {"a": false, "b": ["a`g", "bah"]}, "baz": "z", "foo": [[0, 1, 2], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], "guzo": [[[1]], [[2], [3]]], "jub": [], "quz": {}}
Expected remesparser.Search(log(@.foo[0] + 1), foo) to return [0.0, 0.693147180559945, 1.09861228866811], but instead got [0.0, 0.693147180559945, 1.09861228866811].
Expected remesparser.Search(log2(@.foo[1]), foo) to return [1.58496250072116, 2.0, 2.32192809488736], but instead got [1.58496250072116, 2.0, 2.32192809488736].
Expected remesparser.Search(range(0, -len(@) + len(@)), foo) to return [], but instead threw an exception:
For argument 1 of function range, expected integer|unknown, instead got type float
Expected remesparser.Search(range(0, -len(@) - len(@)), foo) to return [], but instead threw an exception:
For argument 1 of function range, expected integer|unknown, instead got type float
Expected remesparser.Search(range(0, -len(@) * len(@)), foo) to return [], but instead threw an exception:
For argument 1 of function range, expected integer|unknown, instead got type float
Failed 5 tests.
Passed 142 tests.
=========================
Testing that RemesPath throws errors on bad inputs
=========================

Failed 0 tests.
Passed 106 tests.
=========================
Testing RemesPath assignment operations
=========================

Failed 0 tests.
Passed 17 tests.
=========================
Testing JsonSchema generator
=========================

Expected the schema for [{"a": 3},{"a": 1,"b": [{"a": {"b": 1,"c": 2}},{"a": {"b": 1}}]},{"a": 1,"b": [{"a": {"b": 1,"c": 2,"d": 3}}]},{"a": 2,"c": 3}] to be
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"properties": {"a": {"type": "integer"}, "b": {"items": {"properties": {"a": {"properties": {"b": {"type": "integer"}, "c": {"type": "integer"}, "d": {"type": "integer"}}, "required": ["b"], "type": "object"}}, "required": ["a"], "type": "object"}, "type": "array"}, "c": {"type": "integer"}}, "required": ["a"], "type": "object"}, "type": "array"}
Instead got
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"properties": {"a": {"type": "integer"}, "b": {"items": {"properties": {"a": {"properties": {"b": {"type": "integer"}, "c": {"type": "integer"}, "d": {"type": "integer"}}, "required": ["b", "c", "d"], "type": "object"}}, "required": ["a"], "type": "object"}, "type": "array"}, "c": {"type": "integer"}}, "required": ["a"], "type": "object"}, "type": "array"}
Expected the schema for [[null, 1], [null, ["a"]]] to be
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"items": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "integer"}, {"type": "null"}]}, "type": "array"}, "type": "array"}
Instead got
{"$schema": "https://json-schema.org/draft/2020-12/schema", "items": {"items": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}, {"type": ["integer", "null"]}]}, "type": "array"}, "type": "array"}
Failed 2 tests.
Passed 4 tests.
=========================
Testing JSON tabularizer
=========================

Failed 0 tests.
Passed 50 tests.
=========================
Testing JSON grepper's file reading ability
=========================

Failed 0 tests.
Passed 6 tests.
=========================
Testing JSON grepper's API request tool
=========================

Testing with 3 urls
Testing with 1 urls
Failed 0 tests.
Passed 4 tests.
=========================
Performance tests for JsonParser
=========================

Preview of json: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
To convert JSON string of size 91926 into JNode took 4.59 +/- 1.585 ms over 28 trials
Load times (ms): 8, 5, 7, 4, 3, 5, 2, 5, 2, 4, 2, 4, 2, 4, 6, 5, 6, 3, 6, 3, 5, 4, 2, 5, 2, 5, 1, 4
=========================
Performance tests for RemesPath (float arithmetic)
=========================

Compiling query "@[@[:].a * @[:].q < @[:].e]" into took 0.005 +/- 0.005 ms over 56 trials
To run pre-compiled query "@[@[:].a * @[:].q < @[:].e]" on JNode from JSON of size 91926 into took 0.036 +/- 0.012 ms over 56 trials
Query times (ms): 0.104, 0.034, 0.028, 0.039, 0.027, 0.041, 0.028, 0.028, 0.031, 0.033, 0.033, 0.034, 0.034, 0.037, 0.037, 0.055, 0.039, 0.04, 0.05, 0.052, 0.041, 0.035, 0.038, 0.043, 0.039, 0.034, 0.037, 0.036, 0.034, 0.036, 0.035, 0.044, 0.037, 0.039, 0.044, 0.056, 0.058, 0.03, 0.028, 0.027, 0.027, 0.027, 0.028, 0.026, 0.027, 0.026, 0.026, 0.026, 0.027, 0.027, 0.027, 0.028, 0.027, 0.028, 0.028, 0.031
Preview of result: [{"A": "Ky'c^g#~)0", "a": 1850111954, "b": 9318359041, "B": "Oyi:/ xxe2", "C": "sKCSa_^7Gg", "c": 7974777124, "d": 2670309238, "D": "0d_K)HmX!.", "E": ".uM*Z{0EJ_", "e": 6958410336, "f": 8050244728, "F": "1%SG_A!xB\t", "g": 3799657125, "G": "il1^k\\\nat*", "H": {"a": 6079042826, "b": 7292804611, "c"
...
=========================
Performance tests for RemesPath (string operations)
=========================

Compiling query "@[@[:].z =~ `(?i)[a-z]{5}`]" into took 0.003 +/- 0.006 ms over 56 trials
To run pre-compiled query "@[@[:].z =~ `(?i)[a-z]{5}`]" on JNode from JSON of size 91926 into took 0.118 +/- 0.072 ms over 56 trials
Query times (ms): 0.33, 0.115, 0.122, 0.138, 0.137, 0.154, 0.117, 0.096, 0.11, 0.107, 0.17, 0.109, 0.135, 0.158, 0.1, 0.089, 0.094, 0.104, 0.109, 0.133, 0.112, 0.117, 0.106, 0.106, 0.112, 0.115, 0.084, 0.092, 0.088, 0.088, 0.098, 0.1, 0.097, 0.096, 0.096, 0.092, 0.092, 0.094, 0.092, 0.09, 0.091, 0.091, 0.09, 0.09, 0.08, 0.087, 0.126, 0.096, 0.096, 0.091, 0.09, 0.092, 0.587, 0.126, 0.107, 0.091
Preview of result: [{"A": "\n]o1VQ5t6g", "a": 4710024278, "b": 3268860721, "B": "g4Y7+ew^.v", "C": "<E_7XL7YS`", "c": 4921465277, "d": 9420665097, "D": "Q&S>NK<OOn", "E": "M?6Ll1W\nFM", "e": 4146283970, "f": 8384193493, "F": "z[jPvslL\tc", "g": 1578133296, "G": "m'M4h,`|Wk", "H": {"a": 5184250383, "b": 5337791147, "c"
...
